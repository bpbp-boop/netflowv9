extern crate test;
use super::*;

#[test]
fn data_template() {

    let pkt = Packet::from_bytes(RAW_DATA_TEMPLATE1).unwrap();
    let header = pkt.header();

    assert_eq!(header.version(), 9);
    assert_eq!(header.count(), 1);
    assert_eq!(header.sys_uptime(), 1625184002);
    assert_eq!(header.seconds(), 1468264405);
    assert_eq!(header.seq_num(), 59847);
    assert_eq!(header.source_id(), 2097);

    for flowset in pkt.flowsets() {
        use FlowSet::*;
        match flowset {
            DataTemplates(tpls) => {
                for tpl in tpls {
                    println!("\tdata template {}", tpl.template_id);
                    assert_eq!(tpl.template_id, 324);
                    assert_eq!(tpl.field_count, 23);
                    assert_eq!(tpl.fields.clone().count(), 23);

                    println!("\t\tfields:");
                    for field in tpl.fields.clone() {
                        println!("\t\t\t{:?}", field);
                    }
                    assert_eq!(tpl.fields.clone().count(), 23);
                }
            }
            _ => panic!(),
        }
    }
}

#[test]
fn jflow() {

    let packet = Packet::from_bytes(RAW_JFLOW_PDU).unwrap();
    let header = packet.header();
    assert_eq!(header.version(), 9);
    assert_eq!(header.sys_uptime(), 0x5d9512eb);
    assert_eq!(header.seconds(), 0x578cfd56);
    assert_eq!(header.source_id(), 150);

    let mut flowsets = packet.flowsets();
    let fs1 = flowsets.next().unwrap();
    match fs1 {
        FlowSet::OptionsTemplates(mut templates) => {
            let template1 = templates.next().unwrap();
            assert_eq!(template1.template_id, 256);
            assert_eq!(template1.option_scope_length, 4);
            assert_eq!(template1.option_length, 8);
            assert_eq!(template1.fields.clone().count(), 2);
            let fields: Vec<TemplateField> = template1.fields.clone().map(|(_l, t)| t).collect();
            println!("fields: {:#?}", fields);
            assert!(templates.next().is_none());
        }
        _ => panic!("Expected DataTemplates"),
    }
    let _ = flowsets.next().unwrap();
    let _ = flowsets.next().unwrap();
    assert!(flowsets.next().is_none());
}

#[test]
fn options_template() {

    let pkt = Packet::from_bytes(RAW_OPTIONS_TEMPLATE1).unwrap();
    let header = pkt.header();

    assert_eq!(header.version(), 9);
    assert_eq!(header.count(), 1);
    assert_eq!(header.sys_uptime(), 0x60de8b53);
    assert_eq!(header.seconds(), 1468264407);
    assert_eq!(header.seq_num(), 130359);
    assert_eq!(header.source_id(), 2081);

    for flowset in pkt.flowsets() {
        use FlowSet::*;
        match flowset {
            OptionsTemplates(tpls) => {
                for tpl in tpls {
                    println!("\toptions template {}", tpl.template_id);
                    assert_eq!(tpl.template_id, 257);
                    assert_eq!(tpl.option_scope_length, 4);
                    assert_eq!(tpl.option_length, 16);
                    assert_eq!(tpl.fields.clone().count(), 4);
                    assert_eq!(tpl.scopes.clone().count(), 1);

                    println!("\t\tscopes:");
                    for scope in tpl.scopes.clone() {
                        println!("\t\t\t{:?}", scope);
                    }
                    println!("\t\toptions:");
                    for field in tpl.fields.clone() {
                        println!("\t\t\t{:?}", field);
                    }
                }
            }
            _ => panic!(),
        }
    }
}

#[test]
fn options_records() {

    let pkt1 = Packet::from_bytes(RAW_OPTIONS_TEMPLATE1).unwrap();
    let template = match pkt1.flowsets().next().unwrap() {
        FlowSet::OptionsTemplates(mut tpls) => tpls.next().unwrap(),
        _ => panic!(),
    };

    let extractor = template.build_extractor();

    let pkt2 = Packet::from_bytes(RAW_OPTIONS_REC1).unwrap();
    match pkt2.flowsets().next().unwrap() {
        FlowSet::DataRecords(data) => {
            for record in extractor.records(&data) {
                print!("SamplerId: {:2}, ", record.sampler_id().unwrap_or(0));
                print!("SamplerRandomInterval: {:6}, ",
                       record.sampler_random_interval().unwrap_or(0));
                print!("SamplerMode: {:6}, ", record.sampler_mode().unwrap_or(0));
                println!("SamplerName: {:?}, ",
                         record.sampler_name().map(|s| {
                             let str_len = s.iter().position(|c| *c == 0).unwrap_or(s.len());
                             String::from_utf8_lossy(&s[..str_len])
                         }));
            }
        }
        _ => panic!(),
    }
}

#[test]
fn data_records() {

    let pkt1 = Packet::from_bytes(RAW_DATA_TEMPLATE1).unwrap();
    let template = match pkt1.flowsets().next().unwrap() {
        FlowSet::DataTemplates(mut tpls) => tpls.next().unwrap(),
        _ => panic!(),
    };
    let extractor = template.build_extractor();

    let pkt2 = Packet::from_bytes(RAW_DATA_REC1).unwrap();
    match pkt2.flowsets().next().unwrap() {
        FlowSet::DataRecords(data) => {
            for record in extractor.records(&data) {
                use std::net::Ipv4Addr;
                print!("Protocol: {:2}, ",
                       record.protocol_identifier().unwrap_or(0));
                print!("Bytes: {:6}, ", record.octet_delta_count().unwrap_or(0));
                print!("Pkts: {:6}, ", record.packet_delta_count().unwrap_or(0));
                print!("{}:{} -> ",
                       Ipv4Addr::from(record.source_ipv4_address().unwrap_or([0u8, 0, 0, 0])),
                       record.source_transport_port().unwrap_or(0));
                println!("{}:{}",
                         Ipv4Addr::from(record.destination_ipv4_address()
                             .unwrap_or([0u8, 0, 0, 0])),
                         record.destination_transport_port().unwrap_or(0));
            }
        }
        _ => panic!(),
    }
}


#[test]
fn double_templates() {

    let packet = Packet::from_bytes(RAW_MIXED_PDU).unwrap();
    let header = packet.header();
    assert_eq!(header.version(), 9);
    assert_eq!(header.sys_uptime(), 0x70593838);
    assert_eq!(header.seconds(), 1468784891);
    assert_eq!(header.source_id(), 0);

    let mut flowsets = packet.flowsets();
    let fs1 = flowsets.next().unwrap();
    match fs1 {
        FlowSet::DataTemplates(mut templates) => {
            let template1 = templates.next().unwrap();
            assert_eq!(template1.template_id, 257);
            assert_eq!(template1.field_count, 21);
            assert_eq!(template1.fields.clone().count(), 21);
            let template2 = templates.next().unwrap();
            assert_eq!(template2.template_id, 256);
            assert_eq!(template2.field_count, 19);
            assert_eq!(template2.fields.clone().count(), 19);
            let fields: Vec<TemplateField> = template2.fields.clone().map(|(_l, t)| t).collect();
            println!("fields: {:#?}", fields);
            assert!(templates.next().is_none());
        }
        _ => panic!("Expected DataTemplates"),
    }
    let _ = flowsets.next().unwrap();
    assert!(flowsets.next().is_none());
}



#[bench]
fn data_bench(b: &mut test::Bencher) {

    let pkt1 = Packet::from_bytes(RAW_DATA_TEMPLATE1).unwrap();
    let template = match pkt1.flowsets().next().unwrap() {
        FlowSet::DataTemplates(mut tpls) => tpls.next().unwrap(),
        _ => panic!(),
    };
    let extractor = template.build_extractor();

    b.iter(|| {
        let pkt2 = Packet::from_bytes(RAW_DATA_REC1).unwrap();
        match pkt2.flowsets().next().unwrap() {
            FlowSet::DataRecords(data) => {
                for record in extractor.records(&data) {
                    test::black_box(record.protocol_identifier());
                    test::black_box(record.octet_delta_count());
                    test::black_box(record.packet_delta_count());
                    test::black_box(record.source_transport_port());
                    test::black_box(record.destination_transport_port());
                    test::black_box(record.source_ipv4_address());
                    test::black_box(record.destination_ipv4_address());
                }
            }
            _ => panic!(),
        }
    });
}


const RAW_DATA_TEMPLATE1: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x01, 0x60, 0xde, 0x57, 0x02, 0x57, 0x83, 0xef, 0xd5, 0x00, 0x00, 0xe9,
      0xc7, 0x00, 0x00, 0x08, 0x31, 0x00, 0x00, 0x00, 0x64, 0x01, 0x44, 0x00, 0x17, 0x00, 0x02,
      0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04, 0x00,
      0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04,
      0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x81, 0x00, 0x04, 0x00, 0x80, 0x00,
      0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x04,
      0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x3d, 0x00, 0x01, 0x00,
      0x59, 0x00, 0x01, 0x00, 0x30, 0x00, 0x02, 0x00, 0xea, 0x00, 0x04, 0x00, 0xeb, 0x00, 0x04];

const RAW_OPTIONS_TEMPLATE1: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x01, 0x60, 0xde, 0x8b, 0x53, 0x57, 0x83, 0xef, 0xd7, 0x00, 0x01, 0xfd,
      0x37, 0x00, 0x00, 0x08, 0x21, 0x00, 0x01, 0x00, 0x20, 0x01, 0x01, 0x00, 0x04, 0x00, 0x10,
      0x00, 0x01, 0x00, 0x04, 0x00, 0x30, 0x00, 0x02, 0x00, 0x32, 0x00, 0x04, 0x00, 0x31, 0x00,
      0x01, 0x00, 0x54, 0x00, 0x20, 0x00, 0x00];

const RAW_DATA_REC1: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x0f, 0x60, 0xde, 0x9a, 0x20, 0x57, 0x83, 0xef, 0xda, 0x00, 0x01, 0xff,
      0x53, 0x00, 0x00, 0x08, 0x21, 0x01, 0x44, 0x03, 0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x38, 0x4d, 0x42, 0x26, 0xf0, 0x05, 0x67, 0x83, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x00,
      0x00, 0x00, 0x14, 0x60, 0xde, 0x48, 0x79, 0x60, 0xde, 0x48, 0x79, 0xf2, 0x76, 0x05, 0x99,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x36, 0x1d, 0xbd, 0x1b, 0x10, 0x06,
      0x18, 0x00, 0x01, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0xe2, 0x4d, 0x42, 0x36, 0x9b, 0x5f, 0xd0, 0x14, 0x08,
      0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x14, 0x60, 0xde, 0x48, 0x79, 0x60, 0xde, 0x48,
      0x79, 0x00, 0x50, 0x4f, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x36,
      0x1d, 0xbd, 0x20, 0x11, 0x06, 0x18, 0x00, 0x01, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00,
      0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0xdc, 0x4d, 0xf3, 0x84,
      0xbc, 0x4d, 0x42, 0x2c, 0xe7, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x4c, 0x60, 0xde,
      0x48, 0x7a, 0x60, 0xde, 0x48, 0x7a, 0x23, 0x29, 0xa1, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x4d, 0x42, 0x79, 0x05, 0x14, 0x16, 0x06, 0x10, 0x00, 0x00, 0x40, 0x00,
      0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x68, 0x42, 0x66, 0x09, 0x57, 0x4d, 0x42, 0x10, 0xb9, 0x00, 0x00, 0x00, 0x14, 0x00,
      0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x7a, 0x60, 0xde, 0x1a, 0x58, 0xb4, 0x36, 0x00, 0x50,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x74, 0xff, 0x0e, 0x14, 0x1d, 0x06,
      0x10, 0x00, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x2e, 0xd0, 0x8f, 0x4d, 0x4d, 0x42, 0x36, 0x9b,
      0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x7b, 0x60, 0xde, 0x48,
      0x7b, 0xcb, 0x14, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42,
      0x1f, 0xa1, 0x10, 0x20, 0x06, 0x10, 0x80, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00,
      0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x51, 0x17, 0x80,
      0x1e, 0xd8, 0x3a, 0xd1, 0x81, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x14, 0x60, 0xde,
      0x48, 0x7c, 0x60, 0xde, 0x48, 0x7c, 0x27, 0x14, 0x01, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x57, 0x36, 0x1d, 0xbd, 0x14, 0x18, 0x06, 0x10, 0x00, 0x01, 0x40, 0x00,
      0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x0b, 0xb8, 0x4d, 0x42, 0x02, 0x4e, 0xb0, 0x16, 0x04, 0x46, 0x00, 0x00, 0x00, 0x30, 0x00,
      0x00, 0x00, 0x14, 0x60, 0xde, 0x48, 0x7c, 0x60, 0xde, 0x48, 0x54, 0x00, 0x50, 0x89, 0x43,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x36, 0x1d, 0xbd, 0x1a, 0x0e, 0x06,
      0x10, 0x00, 0x01, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0xb1, 0x86, 0x06, 0xd4, 0x4d, 0x42, 0x36, 0x9b,
      0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x4c, 0x60, 0xde, 0x48, 0x7e, 0x60, 0xde, 0x48,
      0x7e, 0xea, 0x5d, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42,
      0x1f, 0xa1, 0x13, 0x20, 0x06, 0x10, 0x00, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00,
      0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x04, 0x38, 0x05, 0x68, 0x45,
      0x8d, 0x4d, 0x42, 0x01, 0xe7, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2f, 0x60, 0xde,
      0x48, 0x7f, 0x60, 0xde, 0x37, 0x23, 0x9e, 0x5e, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x4d, 0x42, 0x37, 0x05, 0x18, 0x1b, 0x06, 0x10, 0x00, 0x00, 0x40, 0x00,
      0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x5c, 0x36, 0xaf, 0xfc, 0x2e, 0x4d, 0x42, 0x04, 0x26, 0x00, 0x00, 0x00, 0x14, 0x00,
      0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x7f, 0x60, 0xde, 0x48, 0x7f, 0x00, 0x50, 0xce, 0x2d,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42, 0x37, 0x0b, 0x0f, 0x1c, 0x06,
      0x18, 0x02, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x11, 0x94, 0x5f, 0xd3, 0x74, 0x47, 0xc2, 0xf2, 0x28, 0x97,
      0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x80, 0x60, 0xde, 0x48,
      0x3e, 0x00, 0x50, 0xe4, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x74,
      0xee, 0xee, 0x10, 0x18, 0x06, 0x18, 0x00, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00,
      0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x4d, 0x42, 0x36,
      0x9b, 0x5b, 0x2f, 0xc7, 0x0b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x14, 0x60, 0xde,
      0x48, 0x80, 0x60, 0xde, 0x48, 0x80, 0x00, 0x50, 0xc9, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x57, 0x36, 0x1d, 0xbd, 0x20, 0x0a, 0x06, 0x10, 0x00, 0x01, 0x40, 0x00,
      0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
      0x00, 0x28, 0xbb, 0x6f, 0x9d, 0x92, 0x4d, 0x42, 0x36, 0x9b, 0x00, 0x00, 0x00, 0x14, 0x00,
      0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x80, 0x60, 0xde, 0x48, 0x80, 0xd7, 0x75, 0x00, 0x50,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42, 0x1f, 0xa1, 0x17, 0x20, 0x06,
      0x10, 0x00, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0xb0, 0x00, 0x35, 0xbd, 0x4d, 0x42, 0x36, 0x9b,
      0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2e, 0x60, 0xde, 0x48, 0x81, 0x60, 0xde, 0x48,
      0x81, 0xa3, 0x7c, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42,
      0x1f, 0xa1, 0x0d, 0x20, 0x06, 0x11, 0x00, 0x00, 0x40, 0x00, 0x12, 0x60, 0x00, 0x00, 0x00,
      0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7b, 0xcc, 0x3d, 0xd8,
      0x64, 0x4d, 0x42, 0x6c, 0x5d, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2e, 0x60, 0xde,
      0x48, 0x82, 0x60, 0xde, 0x48, 0x82, 0x00, 0x35, 0x93, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x4d, 0x42, 0x79, 0x05, 0x17, 0x16, 0x11, 0x00, 0x00, 0x00, 0x40, 0x00,
      0x12, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00];

const RAW_OPTIONS_REC1: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x04, 0x60, 0xde, 0x8b, 0x53, 0x57, 0x83, 0xef, 0xd7, 0x00, 0x01, 0xfd,
      0x38, 0x00, 0x00, 0x08, 0x21, 0x01, 0x01, 0x00, 0xb0, 0x4d, 0x42, 0x37, 0x03, 0x00, 0x12,
      0x00, 0x00, 0x00, 0x80, 0x02, 0x53, 0x41, 0x4d, 0x50, 0x31, 0x32, 0x38, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42, 0x37, 0x03, 0x00, 0x12, 0x00, 0x00,
      0x00, 0x80, 0x02, 0x53, 0x41, 0x4d, 0x50, 0x31, 0x32, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x42, 0x37, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00, 0x80,
      0x02, 0x53, 0x41, 0x4d, 0x50, 0x31, 0x32, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x4d, 0x42, 0x37, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00, 0x80, 0x02, 0x53,
      0x41, 0x4d, 0x50, 0x31, 0x32, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00];


const RAW_MIXED_PDU: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x04, 0x70, 0x59, 0x38, 0x38, 0x57, 0x8b, 0xe0, 0xfb, 0x00, 0x00, 0x03,
      0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x01, 0x01, 0x00, 0x15, 0x00, 0x15,
      0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00,
      0x0a, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
      0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00,
      0x02, 0x00, 0x30, 0x00, 0x01, 0x00, 0x33, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x04, 0x00, 0x0d,
      0x00, 0x01, 0x00, 0x09, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3d, 0x00, 0x01, 0x00,
      0x11, 0x00, 0x02, 0x00, 0x10, 0x00, 0x02, 0x01, 0x00, 0x00, 0x13, 0x00, 0x15, 0x00, 0x04,
      0x00, 0x16, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00,
      0x02, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x04,
      0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00,
      0x30, 0x00, 0x01, 0x00, 0x33, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x01,
      0x00, 0x09, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3d, 0x00, 0x01, 0x01, 0x01, 0x00,
      0x64, 0x70, 0x58, 0xd2, 0xb0, 0x70, 0x58, 0xd2, 0xb0, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x4c, 0x00, 0x00, 0xc6, 0x14, 0x45, 0x62, 0x53, 0xdd, 0x80, 0x0f, 0x06,
      0x00, 0x79, 0xff, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x70, 0x58, 0xe6, 0x70, 0x70, 0x58, 0xe6, 0x70, 0x00, 0x00, 0x00,
      0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x00, 0x95, 0x38, 0x03, 0x74, 0x53, 0xdd,
      0x80, 0x0e, 0x06, 0x00, 0x00, 0x50, 0x0f, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
      0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00];

const RAW_JFLOW_PDU: &'static [u8] =
    &[0x00, 0x09, 0x00, 0x03, 0x5d, 0x95, 0x12, 0xeb, 0x57, 0x8c, 0xfd, 0x56, 0x00, 0x00, 0x00,
      0xca, 0x00, 0x00, 0x00, 0x96, 0x00, 0x01, 0x00, 0x18, 0x01, 0x00, 0x00, 0x04, 0x00, 0x08,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0x00, 0x22, 0x00, 0x04, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c,
      0x01, 0x01, 0x00, 0x15, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x05, 0x00,
      0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x20,
      0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00,
      0x10, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x06, 0x00, 0x01,
      0x00, 0x0e, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00,
      0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x01];
